; n√ºcomer magazine (c) copyright Kroc Camen 2019. unless otherwise noted,
; licenced under Creative Commons Attribution Non-Commercial Share-Alike 4.0
; licence; you may reuse and modify this code how you please as long as you:
;
; - retain the copyright notice
; - use the same licence for your derived code
; - do not use it for commercial purposes
;   (contact the author for a commercial licence)
;
; menu.acme:
;===============================================================================
; the main menu page, i.e. the front-page / directory of the magazine

!ct "build/scr_nucomer.ct"

; theme colours
.MENU_BORDER    = .VIC_BLACK
.MENU_FORE      = .VIC_BLACK
.MENU_BACK      = .VIC_LTGREY

!addr {

zp_menu_index   = $10           ; currently selected menu item

}

;===============================================================================
; table of interrupts to use for the menu screen:
;
menu_irqs:
;-------------------------------------------------------------------------------
.MENU_IRQ1      = SCANLINE_VBLANK_END + (1 * 8)-2
.MENU_IRQ2      = SCANLINE_VBLANK_END + (2 * 8)-2
.MENU_IRQ3      = SCANLINE_VBLANK_END + (3 * 8)-2
.MENU_IRQ4      = SCANLINE_VBLANK_BEGIN
.MENU_IRQS      = 4

menu_irqs_addr_lo:
        !byte   <menu_irq_vblank
        !byte   <menu_irq_logo_end
        !byte   <menu_irq_logo
        !byte   <menu_irq_logo
menu_irqs_addr_hi:
        !byte   >menu_irq_vblank
        !byte   >menu_irq_logo_end
        !byte   >menu_irq_logo
        !byte   >menu_irq_logo
menu_irqs_scanline_lo:
        !byte   <.MENU_IRQ4
        !byte   <.MENU_IRQ3
        !byte   <.MENU_IRQ2
        !byte   <.MENU_IRQ1
menu_irqs_scanline_hi:
        !byte   (>.MENU_IRQ4) << 7
        !byte   (>.MENU_IRQ3) << 7
        !byte   (>.MENU_IRQ2) << 7
        !byte   (>.MENU_IRQ1) << 7

menu_irq_logo:
        ;-----------------------------------------------------------------------
        ; note that the global interrupt handler `irq` (see "interrupts.acme"),
        ; has delayed up to the horizontal blank, so we can change colours
        ; immediately and there won't be any flicker
        ;
        lda # .VIC_DKGREY
        sta .VIC_BORDER

        ; now kill enough time for a whole line
        ; TODO: time this more accurately (~63-65 cycles)
        ldx # 11
-       dex
        bne -

        ; go back to black
        stx .VIC_BORDER

        rts

menu_irq_logo_end:
        ;-----------------------------------------------------------------------
        ; note that the global interrupt handler `irq` (see "interrupts.acme"),
        ; has delayed up to the horizontal blank, so we can change colours
        ; immediately and there won't be any flicker
        ;
        lda # .VIC_DKGREY
        sta .VIC_BORDER
        lda # .VIC_LTGREY
        sta .VIC_BACKGROUND

        ; now kill enough time for a whole line
        ; TODO: time this more accurately (~63-65 cycles)
        ldx # 9
-       dex
        bne -
        ; go back to black
        stx .VIC_BORDER
        stx .VIC_BACKGROUND

        ; change to the custom font for the rest of the page
        lda # ((>nu_screen & %00111100) << 2) | ((>nu_font_lo & %00111000) >> 2)
        sta .VIC_LAYOUT

        ; kill enough time to get out of the left-hand border before we change
        ; the colour. TODO: time this more accurately
        ldx # 2
-       dex
        bne -

        lda # .VIC_LTGREY
        sta .VIC_BORDER
        sta .VIC_BACKGROUND

        ; TODO: colour-wash the logo

        rts

@colours
        ;-----------------------------------------------------------------------
        !byte   .VIC_WHITE, .VIC_LTBLUE, .VIC_LTGREEN, .VIC_YELLOW, .VIC_BLUE

menu_irq_vblank:
        ;-----------------------------------------------------------------------
        lda # .MENU_BORDER
        sta .VIC_BORDER
        sta .VIC_BACKGROUND

        ; change to the ROM PETSCII font for the logo...
        lda # ((>nu_screen & %00111100) << 2) | ((>nu_font_up & %00111000) >> 2)
        sta .VIC_LAYOUT

        rts

;===============================================================================
menu_screen:
        ;-----------------------------------------------------------------------
        ; setup the screen:
        ; turn the screen off whilst we clear it
        lda # %00000000
        sta .VIC_SCREEN_CTL1
        
        ; set screen colour
        lda # .MENU_BORDER
        sta .VIC_BORDER
        lda # .MENU_BACK
        sta .VIC_BACKGROUND

        ; erase the text-screen
        lda # .MENU_FORE
        jsr clear_screen

        ; print logo:
        ;-----------------------------------------------------------------------
        ; print the logo with the base colour;
        ; we're going to recolour just the letters
        lda # .VIC_DKGREY
        sta ZP_PRINT_COLOR
       +print_str_pos       menu_petscii_logo

        ; begin at the end of the logo and work backwards
        ; (easier for loop management to count toward 0)
        ldy # (3 * 40)
        ldx # .VIC_BLUE         ; colour of letters

-       dey
        bmi +                   ; finished?

        lda nu_screen, y        ; read a character from the logo
        cmp # $64               ; is the character a background-line?
        beq -                   ; yes, skip it and don't change the colour
        txa
        sta $d800, y
        bpl -                   ; (always branches)

+       lda # .VIC_BLACK
        sta ZP_PRINT_COLOR

       +print_str_pos   menu_str_subline
       +print_str_pos   menu_str_help

        ; print menu items:
        ;-----------------------------------------------------------------------
        ; select the first menu item by default
        lda # 0
        sta zp_menu_index
        
        ; draw the menu items on the screen
        jsr menu_refresh

        ;-----------------------------------------------------------------------
        ; set our own interrupt handlers
        ;
        lda #< menu_irqs        ; address of IRQ table, lo-byte
        ldx #> menu_irqs        ; address of IRQ table, hi-byte
        ldy # .MENU_IRQS        ; number of entries in the table (1-based)
        jsr irqs_load           ; (this will enable interrupts)

        ; turn screen on
        lda # %00011011
        sta .VIC_SCREEN_CTL1
        
menu_keyboard:
        ;-----------------------------------------------------------------------
        ; debounce the keyboard by waiting for no keypress
        ;
-       jsr Keyboard            ; check current state of keyboard
        bcc -                   ; if key pressed, keep checking

        ; now await a keypress
-       jsr Keyboard
        bcs -

        ; load article?
@enter  cpx # %00000010         ; check RETURN-key bit
        bne @crsr               ; no? maybe cursor keys?
        jmp menu_load           ; load & show the article

        ; cursor up/down?
@crsr   cpx # %10000000         ; check CRSR-key bit
        bne @stop               ; no? what other keys are pressed?
        
        ; up, or down?
        tya
        and # %01010000         ; are either of the shift keys pressed?
        bne @up                 ; if yes, it's CRSR-UP

        ; crsr-dn: move to the next menu item
@dn     ldy zp_menu_index       ; what's the currently selected menu item?
        iny                     ; if we were to move down...
        cpy # .MENU_DB_COUNT    ; would we go below the bottom? (1-based)
        beq menu_keyboard       ; if at the bottom, move no further
        inc zp_menu_index
        jsr menu_refresh
        jmp menu_keyboard

        ; crsr-up: move to the previous menu item
@up     ldy zp_menu_index       ; what's the currently selected menu item?
        dey                     ; if we were to move up?
        bmi menu_keyboard       ; if already at top, move no further
        dec zp_menu_index
        jsr menu_refresh
        jmp menu_keyboard

        ; run/stop: invoke BSOD64
@stop   cpy # %10000000
        bne @next
        brk

        ;-----------------------------------------------------------------------
@next   jmp menu_keyboard

;===============================================================================
; draw the article titles on the screen:
;
; the number of articles, and their names are provided by a file
; "build/menu_db.acme" that is generated by the build process
; when converting the articles into a C64-readable format
;
menu_refresh:
        ;-----------------------------------------------------------------------
        ; the menu-count is 1-based; subtract 1 to avoid printing garbage.
        ; we also render the menu items from last to first for speed purposes
        ldy # .MENU_DB_COUNT
        dey
        
        ; position the cursor:
        ;-----------------------------------------------------------------------
-       lda menu_db_cols, y     ; get the column
        tax                     ; in X
        sty @i+1                ; (backup index)
        lda menu_db_rows, y     ; get the row
        tay                     ; in Y
        jsr print_set_crsr      ; set cursor: Y = row, X = col

        ; set the text colour:
        ;-----------------------------------------------------------------------
@i      ldy # $88               ; retrieve the menu index
        cpy zp_menu_index       ; is this the selected menu item?
        bne +                   ; no, use standard colour
        lda # .VIC_BLACK        ; yes, use selected colour
       +bit_skip2               ; skip over the next instruction
+       lda # .VIC_DKGREY
        sta ZP_PRINT_COLOR

        ; print the string:
        ;-----------------------------------------------------------------------
        lda menu_db_strlo, y    ; load the string address lo-byte...
        tax                     ; ...into X
        lda menu_db_strhi, y    ; load the string address hi-byte into A
        jsr print_str           ; print the string!
        dey
        bpl -

        ; mark the selected menu item:
        ;-----------------------------------------------------------------------
        ldy zp_menu_index
        lda menu_db_cols, y     ; column number
        tax                     ; must be in X
        lda menu_db_rows, y     ; row in Y
        jsr print_get_crsr      ; returns X = addr lo-byte, A = addr hi-byte
        stx @scr+1              ; set screen address lo-byte
        stx @color+1            ; mirror this in the screen RAM
        sta @scr+2              ; set screen address hi-byte
        clc                     ; to mirror this in the colour RAM, add the
        adc #>($d800-nu_screen) ; distance between screen RAM & colour RAM
        sta @color+2            ; e.g. $0508 -> $D908

        lda # $f0               ; screen code for marker symbol
@scr    sta $8888
        lda # .VIC_BLACK
@color  sta $8888

        rts

;===============================================================================
; load an article:
; TODO: transition screen out
;
menu_load:
        ;-----------------------------------------------------------------------
        ; turn the screen off
        lda # %00001000
        sta .VIC_SCREEN_CTL1
        ; tear down the custom interrupt handlers
        jsr irqs_disable

        lda # .READ_BACK
        sta .VIC_BORDER
        lda # .READ_FORE
        sta .VIC_BACKGROUND
        
        ; change to the custom font, don't remain on the ROM font!
        lda # ((>nu_screen & %00111100) << 2) | ((>nu_font_lo & %00111000) >> 2)
        sta .VIC_LAYOUT

        ; set the KERNAL load properties:
        sei                     ; disable interrupts
        inc .CPU_CONTROL        ; enable the KERNAL

        ; get the last-used device
        ; number set by the KERNAL
        ldx .ZP_KERNAL_DEV
        bne +                   ; not 0? good
        ldx # .DEV_DRV8         ; default to drive 8
+       ldy # $00               ; use custom load address
        tya                     ; logical file number
        jsr .KERNAL_SETLFS

        ; read the address of the filename:
        ldy zp_menu_index       ; currently selected menu item
        lda menu_db_prg_lens, y ; get string length from the menu database
        pha                     ; put aside whilst we reuse register A
        
        ; the file names are all padded to 16-bytes,
        ; so we only need to multiply the index to fit
        tya
        ; TODO: this is an 8-bit result so we are limited to 16 menu items
        asl                     ; x2...
        asl                     ; x4...
        asl                     ; x8...
        asl                     ; x16
        clc
        adc #< menu_db_prg_strs ; add this offset to the table of program names
        tax                     ; program name address lo-byte in X
        lda #> menu_db_prg_strs
        adc # 0
        tay                     ; program name address hi-byte in Y
        pla                     ; A is string-length
        jsr .KERNAL_SETNAM      ; set KERNAL file name
        
        lda # 0                 ; load, not verify
        ldx #< nu_text-2
        ldy #> nu_text-2
        jsr .KERNAL_LOAD

        ; TODO: error handling, fastloader et al
        bcc +
        brk                     ; BSOD!
        
+       dec .CPU_CONTROL        ; turn KERNAL off
        cli
        
        ; switch to the reading screen...
        jsr read_screen
        ; upon return, restart the menu screen
        jmp menu_screen

menu_petscii_logo:
;===============================================================================
        !byte   0, 0
        !ct "build/scr_logo.ct" {
                !text   " ---- =  = ---- ---- ----- ---- ----    "
                !text   " #  # #  # #    #  # # # # #___ #       "
                !text   " #  # #__# #___ #__# # # # #___ #       "
                !byte   $ff
        }
menu_str_subline:
        !byte   4, 31
        !text   "issue #0"
        !byte   $ff

menu_str_help:
        !byte   23, 0
        !ct "build/scr_reverse.ct" {
                !text   $da, $d4, "crsr", $d5, $d9
        }
        !text   "change-selection"
        
        !ct "build/scr_reverse.ct" {
                !text   $da, "return", $d9
        }
        !text   "select"
        !byte   $ff

menu_db:
;===============================================================================
!source "build/menu_db.acme"
