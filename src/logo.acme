; screen row where the logo text should appear
.LOGO_TEXT_ROW  = 12

; 'final' X-positions of the logo halves
.EYE_LEFT_XPOS  = 8 + (320 / 2) - (21 / 2) - 3
.EYE_RIGHT_XPOS = 8 + (320 / 2) + (21 / 2) + 2

; 'final' Y-positions of the logo halves
.EYE_LEFT_YPOS  = (256 - 24) / 2
.EYE_RIGHT_YPOS = ((256 - 24) / 2) - 1

; starting position of the eye-lid.
; note that it's a double-wide sprite
.EYE_LID1_XPOS  = .EYE_LEFT_XPOS
.EYE_LID1_YPOS  = .EYE_LEFT_YPOS - 24
.EYE_LID2_XPOS  = .EYE_LEFT_XPOS
.EYE_LID2_YPOS  = .EYE_LEFT_YPOS - 24 - 21

logo_screen:
        ;=======================================================================
        ; clear screen:
        ;-----------------------------------------------------------------------
        ; turn the screen off whilst we clear it
        lda # %00001000
        sta VIC_SCREEN_CTL1

        ; set screen colour
        lda # ORANGE
        sta VIC_BORDER
        sta VIC_BACKGROUND

        ; set screen at $0400,
        ; character set at +$1800 (lower-case)
        lda # %00010111
        sta VIC_LAYOUT

        ; erase the text-screen
        lda # ' '               ; clear with space char
        ldx # $00               ; beginning offset

        ; write four 256-byte strips simultaneously
        ; so that we don't have to deal with nested loops
-       sta $0400 + $000, x
        sta $0400 + $100, x
        sta $0400 + $200, x
        sta $0400 + $300, x
        dex
        bne -

        ; configure sprites:
        ;-----------------------------------------------------------------------
        ; set colours
        lda # ORANGE            ; the eye-lid masks the eye,
        sta VIC_SPRITE0_COLOR   ; so has to match the background colour
        STA VIC_SPRITE1_COLOR
        lda # WHITE
        sta VIC_SPRITE2_COLOR
        sta VIC_SPRITE3_COLOR

        ; select which sprite images to show
        lda # (eye_lid1 / 64)
        sta $0400 + VIC_SPRITE0_PTR
        lda # (eye_lid2 / 64)
        sta $0400 + VIC_SPRITE1_PTR
        lda # (eye_left / 64)
        sta $0400 + VIC_SPRITE2_PTR
        lda # (eye_right / 64)
        sta $0400 + VIC_SPRITE3_PTR
        
        ; set sprites to appear behind text
        lda # %11111111
        sta VIC_SPRITE_PRIORITY
        
        ; set sprite stretching;
        ; the eye-lid sprites are double-width
        lda # %00000011
        sta VIC_SPRITE_DBLWIDTH

        ; position the eye-lid sprites
        jsr draw_eyelid

        ; draw the initial layout of logo text and sprites
        ; (this will set sprite X/Y positions and colours)
        ldx # 12
        lda # ORANGE
        jsr draw_logo

        ; sprites configured, turn them on
        lda # %00001111
        sta VIC_SPRITE_ENABLE

        ; turn screen on
        lda # %00011011
        sta VIC_SCREEN_CTL1

        ;-----------------------------------------------------------------------
        ldx # 12
        lda # YELLOW
        jsr animate_logo
        ldx # 6
        jsr animate_logo
        ldx # 3
        lda # LTGREEN
        jsr animate_logo
        ldx # 1
        jsr animate_logo
        ldx # 0
        lda # WHITE
        jsr animate_logo

        ; wait a moment
        ldx # 30
        jsr wait_frames

        ; blink the eye:
        ; (note X is 0 due to above count-down)
-       jsr draw_eyelid         ; position the eye-lid (begins with frame 0)
        jsr wait_frame
        inx
        cpx # 9                 ; reached max. number of frames?
        bcc -                   ; no, keep going

        ; now open the eye-lid
-       jsr draw_eyelid
        jsr wait_frame
        jsr wait_frame
        dex
        bpl -
        jsr draw_eyelid         ; update for frame 0 at the drop-out

        ; wait a moment
        ldx # 25
        jsr wait_frames

        ; fade out
        ;-----------------------------------------------------------------------
        ldy # 5

@fade   lda fadeout_colours, y

        ; colour the sprites and text
        sta VIC_SPRITE2_COLOR
        sta VIC_SPRITE3_COLOR
        ldx # 12
-       dex
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 14, x
        bpl -

        ldx # 3
        jsr wait_frames

        dey
        bpl @fade

        ; logo screen complete
        ;-----------------------------------------------------------------------
        jmp logo_screen
        rts

fadeout_colours:
        !byte   ORANGE, PURPLE, GREY, YELLOW, YELLOW, LTGREEN

animate_logo:
        ;-----------------------------------------------------------------------
        pha
        jsr draw_logo
        
        ldx # 3
        jsr wait_frames
        
        pla
        rts
        
draw_logo:
        ;-----------------------------------------------------------------------
        ; the "camen design" text is centred on the logo at column 20.
        ; it's animated into place as two separate words
        ;
        ;       A = colour of text / sprites
        ;       X = offset that pushes the logo apart in the middle
        ;           (for the animation) must be between 0 - 12
        ;
        ; set the sprite colours first as this is very cheap to do
        sta VIC_SPRITE2_COLOR
        sta VIC_SPRITE3_COLOR

        ; set the colour for the text which has to be written to colour RAM.
        ; because the logo text "design" shifts to the right, we can address
        ; these colour cells directly. ("camen" shifts left, so does not map
        ; to the original incomming X value)
        ;
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 20, x       ; "d"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 21, x       ; "e"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 22, x       ; "s"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 23, x       ; "i"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 24, x       ; "g"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 25, x       ; "n"
        
        pha                     ; put aside colour value

        ; clear the whole text row. this is so that you don't
        ; get left-behind characters from previous frames
        ldy # 39
-       lda # ' '
        sta $0400 + (.LOGO_TEXT_ROW * 40), y
        dey
        bpl -

        ; the right-hand side is written first
        ; as the given offset pushes rightward
        ; (note: use screen codes for these values)
!ct scr {
        lda # 'd'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 20, x
        lda # 'e'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 21, x
        lda # 's'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 22, x
        lda # 'i'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 23, x
        lda # 'g'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 24, x
        lda # 'n'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 25, x
}
        ; for the logo halves, there is a lesser amount of separation on the
        ; Y-axis than the X-axis so we set the left-eye's Y-position here based
        ; upon the canonical separation distance -- the X-spread is scaled up
        txa
        tay                     ; (put aside the original separation distance)
        clc
        adc # .EYE_LEFT_YPOS
        sta VIC_SPRITE2_Y

        ; the right-hand eye moves the opposite direction so we have to
        ; subtract the separation distance from the 'final' Y-position,
        ; we write this distance into the subtract instruction below
        stx @ypos+1
        lda # .EYE_RIGHT_YPOS
        sec
@ypos   sbc # $88
        sta VIC_SPRITE3_Y

        ; now handle the left-hand logo text
        stx @left+1
        lda # 12
        sec
@left   sbc # $88
        tax

        ; (note: use screen codes for these values)
!ct scr {
        lda # 'c'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 2, x
        lda # 'a'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 3, x
        lda # 'm'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 4, x
        lda # 'e'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 5, x
        lda # 'n'
        sta $0400 + (.LOGO_TEXT_ROW * 40) + 6, x
}
        ; and apply the colour:
        pla                     ; retrieve colour value
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 2, x        ; "c"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 3, x        ; "a"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 4, x        ; "m"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 5, x        ; "e"
        sta $D800 + (.LOGO_TEXT_ROW * 40) + 6, x        ; "n"

        ; multiply up the separation distance to
        ; better work for sprite pixel X co-ordinates
        ;
        tya                     ; retrieve original distance from earlier
        asl                     ; x2
        asl                     ; x4
        tax

        ; position the halves of the logo according to the distance given.
        ; first the left eye must have the given distance subtracted so we
        ; write this into the subtract instruction below
        sta @xpos+1
        clc
        lda # .EYE_LEFT_XPOS    ; the intended final position
@xpos   sbc # $88               ; subtract the offset
        sta VIC_SPRITE2_X       ; position the left-eye

        txa
        clc
        adc #.EYE_RIGHT_XPOS    ; only need to add the indent for the right eye
        sta VIC_SPRITE3_X       ; position the right-eye

        rts

draw_eyelid:
        ;-----------------------------------------------------------------------
        ; position the eye-lid over the eye:
        ;
        ;       X = frame index for blinking:
        ;           0 = open, 9 = closed
        ;
        lda .frames, x
        tay
        clc
        adc # .EYE_LID1_YPOS
        sta VIC_SPRITE0_Y
        tya
        clc
        adc # .EYE_LID2_YPOS
        sta VIC_SPRITE1_Y

        ; set X-positions
        ; (needed during initialisation)
        lda # .EYE_LID1_XPOS
        sta VIC_SPRITE0_X
        lda # .EYE_LID2_XPOS
        sta VIC_SPRITE1_X
        
        rts

.frames:
        !byte   0, 1, 2, 4, 7, 11, 16, 22, 29, 32

sprites:
;===============================================================================
!align  63, 0

!macro  spriteBits .v {
        !byte .v >> 16, (.v >> 8) & 255, .v & 255
}

; TODO: these to be compressed
;
; the camen design logo
; copyright (c) Kroc Camen
;
eye_left:
;-------------------------------------------------------------------------------
        ;            765432107654321076543210
        +spriteBits %...................##...
        +spriteBits %................####....
        +spriteBits %..............#####.....
        +spriteBits %............#######.....
        +spriteBits %..........########......
        +spriteBits %.........#########......
        +spriteBits %........##########......
        +spriteBits %.......##########.......
        +spriteBits %......###########.......
        +spriteBits %.....############.......
        +spriteBits %....#############.......
        +spriteBits %...##############.......
        +spriteBits %...###############......
        +spriteBits %..################......
        +spriteBits %..################......
        +spriteBits %.##################.....
        +spriteBits %..#################.....
        +spriteBits %...#################....
        +spriteBits %.....################...
        +spriteBits %........##############..
        +spriteBits %............############
        !byte 0                 ; pad to 64-byte block

eye_right:
;-------------------------------------------------------------------------------
        ; TODO: this is a mirrored and flipped copy of above
        ;       we could do this at runtime
        ;
        ;            765432107654321076543210
        +spriteBits %############............
        +spriteBits %..##############........
        +spriteBits %...################.....
        +spriteBits %....#################...
        +spriteBits %.....#################..
        +spriteBits %.....##################.
        +spriteBits %......################..
        +spriteBits %......################..
        +spriteBits %......###############...
        +spriteBits %.......##############...
        +spriteBits %.......#############....
        +spriteBits %.......############.....
        +spriteBits %.......###########......
        +spriteBits %.......##########.......
        +spriteBits %......##########........
        +spriteBits %......#########.........
        +spriteBits %......########..........
        +spriteBits %.....#######............
        +spriteBits %.....#####..............
        +spriteBits %....####................
        +spriteBits %...##...................
        !byte 0                 ; pad to 64-byte block

eye_lid1:
;-------------------------------------------------------------------------------
        ;            765432107654321076543210
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %#######################.
        +spriteBits %######################..
        +spriteBits %#####################...
        +spriteBits %####################....
        +spriteBits %##################......
        +spriteBits %################........
        +spriteBits %##############..........
        +spriteBits %############............
        +spriteBits %#########...............
        +spriteBits %#####...................
        !byte 0                 ; pad to 64-byte block

eye_lid2:
;-------------------------------------------------------------------------------
        ;            765432107654321076543210
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        +spriteBits %########################
        !byte 0                 ; pad to 64-byte block