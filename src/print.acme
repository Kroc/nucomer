!addr   ZP_PRINT_COLOR          = $02

;===============================================================================
; clear the screen:
;
;       A = text colour
;
clear_screen:
        ;-----------------------------------------------------------------------
        ldx # $00

        ; write four 256-byte strips simultaneously
        ; so we don't have to deal with nested loops
-       sta $d800 + $000, x
        sta $d800 + $100, x
        sta $d800 + $200, x
        sta $d800 + $300, x
        dex
        bne -

        lda # ' '               ; clear with space char
-       sta nu_screen + $000, x
        sta nu_screen + $100, x
        sta nu_screen + $200, x
        sta nu_screen + $300, x
        dex
        bne -

        rts

;===============================================================================
; print a null-terminated string, where the first two
; bytes are the row & col at which to begin printing:
;
;       X = string address, lo-byte
;       A = string address, hi-byte
;       preserves Y
;
print_str_pos:
        ;-----------------------------------------------------------------------
        ; read the row & col:
        ;
        sty @y+1                ; preserve Y
        tay                     ; put aside hi-byte
        txa                     ; begin with lo-byte
        sta $d1                 ; store address lo-byte for string reading
        clc
        adc # 2                 ; move string pointer over the row+col bytes
        sta @from+1

        sty $d2
        tya
        adc # 0
        sta @from+2

        ldy # 0
        lda ($d1), y            ; read the row
        tax                     ; X = row
        iny
        lda ($d1), y            ; A = col

        clc                     ; add the col to the row lo-addr
        adc screen_rows_lo, x   ; carry set if row-addr+col > $FF
        sta @to+1               ; write addr lo-byte into the print routine!
        tay                     ; we need to reuse this lo-addr for colour RAM

        lda screen_rows_hi, x   ; read the row-addr hi-byte
        adc # 0                 ; add the carry if the col caused overflow
        sta @to+2               ; write addr hi-byte into the print routine!

        adc # $d8 - >nu_screen  ; offset from screen RAM to colour RAM
        sta @color+2            ; write the hi-byte into the print routine!
        tya                     ; retrieve our addr lo-byte
        sta @color+1            ; write the lo-byte into the print routine!

        ; print the string:
        ;-----------------------------------------------------------------------
        ldy # 0
@from   lda .invalid, y
        beq +                   ; terminator? exit!
@to     sta nu_screen, y
        iny
        ; if the string reaches 256 length (the increment rolls
        ; over from $FF to $00), then it will stop printing
        bne @from

+       lda ZP_PRINT_COLOR      ; get the colour for the text

        ; the Y register contains the number of characters written,
        ; we can now rewind this to quickly apply the colour
        ;
        ; a 'branch on not zero' will cause the first character to be skipped,
        ; so we use a pre-decrement loop where the colour is applied *after*
        ; having decremented Y, so that the 0 index gets included
        ;
-       dey
@color  sta $d800, y
        bne -

@y      ldy # $88
        rts

.invalid
        !scr    "invalid string!", 0

;===============================================================================
; print a null-terminated string:
;
;       X = string address, lo-byte
;       A = string address, hi-byte
;       preserves Y
;
; `print_set_crsr` must be called beforehand to set the screen address
; to print at which is encoded directly into this routine
;
print_str:
        ;-----------------------------------------------------------------------
!addr   print_str__from         = @from
!addr   print_str__to           = @to
!addr   print_str__color        = @color

        sty @y+1                ; preserve Y
        stx @from+1             ; set the string address lo-byte
        sta @from+2             ; set the string address hi-byte

        ldy # 0
        ;-----------------------------------------------------------------------
@from   lda .invalid, y
        beq +                   ; exit if null-terminator ($00)
@to     sta nu_screen, y
        iny
        bne @from

        ; when the string has been printed, the Y register gives us the length
        ; of the string; we can use this to rewind and apply the colour to the
        ; colour RAM in a tighter loop than combining screen RAM + colour RAM
        ; writes in a single loop
        ;
        ; a 'branch on not zero' will cause the first character to be skipped,
        ; so we use a pre-decrement loop where the colour is applied *after*
        ; having decremented Y, so that the 0 index gets included
        ;
+       lda ZP_PRINT_COLOR      ; text-colour to use
-       dey
@color  sta $d800, y
        bne -

        ; cleanup & exit
        ;-----------------------------------------------------------------------
@y      ldy # $88               ; restore Y
        rts

;===============================================================================
; sets the screen address before printing:
;
;       Y = row
;       X = col
;
print_set_crsr:
        ;-----------------------------------------------------------------------
        txa
        clc
        adc screen_rows_lo, y   ; add the column to the row-offset
        sta print_str__to+1     ; set the lo-byte of the screen address
        sta print_str__color+1  ; this is mirrored in the colour RAM
        lda screen_rows_hi, y   ; get the screen address hi-byte
        adc # 0                 ; ripple the column add
        sta print_str__to+2     ; to mirror this in the colour RAM, add the
        adc #>($d800-nu_screen) ; distance between screen RAM & colour RAM
        sta print_str__color+2  ; e.g. $0508 -> $D908
        
        rts

;===============================================================================
; given a row+col, returns the corresponding screen address
;
;       A = row
;       X = col
;
; returns:
;       X = screen address lo-byte
;       A = screen address hi-byte
;       Y is preserved
;
print_get_crsr:
        ;-----------------------------------------------------------------------
        sty @y+1                ; preserve Y
        tay                     ; index by row (0-24)
        txa                     ; take the column (0-40)
        clc
        adc screen_rows_lo, y   ; add the screen low-address for that row
        tax                     ; store that in X. note that carry might be set
        lda screen_rows_hi, y   ; get the high-address for that row
        adc # 0                 ; if row+col overflow, increase the page number

@y      ldy # $88
        rts

!macro  ldaddr          .addr {
        lda #> .addr
        ldx #< .addr
}

!macro  print_str       .str_addr {
        ldx #< .addr
        lda #> .addr
        jsr print_str
}

!macro  print_str_pos   .str_addr {
       +ldaddr .str_addr
        jsr print_str_pos
}

!macro  print_str_at    .row, .col, .str_addr {
        
        ldy # .row
        ldx # .col
        jsr print_set_crsr

       +print_str .str_addr
}

screen_rows:
;===============================================================================
screen_rows_lo:
;-------------------------------------------------------------------------------
!for    row, 0, 24 {
        !byte   <(nu_screen + (row * 40))
}
screen_rows_hi:
;-------------------------------------------------------------------------------
!for    row, 0, 24 {
        !byte   >(nu_screen + (row * 40))
}