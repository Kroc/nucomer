; nÃ¼comer diskzine (c) copyright Kroc Camen 2019-2023. unless otherwise noted,
; licenced under Creative Commons Attribution Non-Commercial Share-Alike 4.0
; licence; you may reuse and modify this code how you please as long as you:
;
; - retain the copyright notice
; - use the same licence for your derived code
; - do not use it for commercial purposes
;   (contact the author for a commercial licence)
;
; acme.acme : assembly helpers
;===============================================================================

!set    LO = 0
!set    HI = 1

; variable for address allocation:
!set    __alloc_addr    = $0000

; set the allocation address:
;-------------------------------------------------------------------------------
!macro  alloc   .addr {
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ; set the new address to begin allocating
        !set    __alloc_addr    = .addr
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}
; allocate, without advancing the address:
;-------------------------------------------------------------------------------
!macro  addr    ~.label {
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        !addr   .label          = __alloc_addr
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}
; allocate a byte:
;-------------------------------------------------------------------------------
!macro  byte    ~.label {
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        !addr   .label          = __alloc_addr
        !set    __alloc_addr    = __alloc_addr + 1
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}
; allocate a custom number of bytes:
;-------------------------------------------------------------------------------
!macro  bytes   ~.label, .size {
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        !addr   .label          = __alloc_addr
        !set    __alloc_addr    = __alloc_addr + .size
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}
; allocate a word:
;-------------------------------------------------------------------------------
!macro  word    ~.label {
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        !addr   .label          = __alloc_addr
        !set    __alloc_addr    = __alloc_addr + 2
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}