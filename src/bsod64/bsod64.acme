; BSOD64 (C) Kroc Camen, 2019
; licenced under BSD 2-clause
;===============================================================================
; BSOD64 is a "blue screen of death" for C64 programs. why would you want that?
;
; ...
;
; DESIGN GOALS:
;-------------------------------------------------------------------------------
; * completely self-contained:
; - no external dependencies
; - does not need to be compiled into your own program
; - no need for compatibility with any particular assembler
; - can be loaded from disk using BASIC
; - resides in "unused" memory ($C000..$D000)
;
; * small:
; - maximum limit of 4 KB code
; - favours small code over speed / memory usage
; - uses KERNAL functions where possible
;
!source "system.acme"

!to     "bsod64.prg"
!zone   bsod64 {

;===============================================================================
!addr   orig_zp         = $f000 ; backup of zero-page ($0000-$00FF)
!addr   orig_stack      = $f100 ; backup of stack ($0100-$1FF)
!addr   orig_work       = $f200 ; backup of KERNAL work-RAM ($0200-$02FF)
!addr   orig_vectors    = $f300 ; backup of KERNAL/BASIC vectors ($0300-$03FF)
!addr   orig_screen     = $f400 ; backup of text screen ($0400-$04FF)
!addr   orig_color      = $f500 ; backup of colour RAM
!addr   orig_vic        = $f600 ; backup of VIC-II registers (46-bytes)

;-------------------------------------------------------------------------------
; depending on how BSDO64 is invoked, different actions
; must be taking during the freeze and defrost
;
!addr   bsod_is_jsr     = $cfff ; BSOD64 invoked by JSR? $00 = no, $FF = yes
!addr   bsod_is_brk     = $cffe ; BRK interrupt flag: $00 = no, $FF = yes

!addr   bsod_a          = $cffd ; working copy of the A register
!addr   bsod_x          = $cffc ; working copy of the X register
!addr   bsod_y          = $cffb ; working copy of the Y register
!addr   bsod_sp         = $cffa ; working copy of the stack pointer
!addr   bsod_pc         = $cff8 ; working copy of the program counter
!addr   bsod_pc_lo      = $cff8
!addr   bsod_pc_hi      = $cff9
!addr   bsod_f          = $cff7 ; working copy of the processor flags

; address that appears at the top of the memory viewer window
; i.e. the current memory range (128-bytes) within the window;
; not to be confused with the cursor address which can be
; any specific byte within the window
;
!addr   bsod_memview    = $cff5
!addr   bsod_memview_lo = $cff5
!addr   bsod_memview_hi = $cff6

; currently focused address in memory, i.e. the cursor
!addr   bsod_memaddr    = $cff3
!addr   bsod_memaddr_lo = $cff3
!addr   bsod_memaddr_hi = $cff4

;-------------------------------------------------------------------------------
;;; working copy of the frozen processor status flags
;;!addr   zp_f            = $fe
;;; working copy of the frozen registers
;;!addr   zp_y            = $fd
;;!addr   zp_x            = $fc
;;!addr   zp_a            = $fb

;;; temporary stack pointer of the frozen stack i.e. a focus cursor, and not the
;;; origanl stack pointer at time of freeze nor the current system stack pointer
;;!addr   zp_sp           = $02
;;; address of the frozen stack, for indexing
;;!addr   zp_stack        = $03
;;!addr   zp_stack_lo     = $03
;;!addr   zp_stack_hi     = $04

; address pointer used for printing memory values
; e.g. display the memory hexdump
!addr   zp_addr         = $05
!addr   zp_addr_lo      = $05
!addr   zp_addr_hi      = $06

;-------------------------------------------------------------------------------
; address for string indexing
; ("pointer to memory allocated for current string variable")
!addr   zp_str          = $35
!addr   zp_str_lo       = $35
!addr   zp_str_hi       = $36

;===============================================================================

STR_END                 = $00
STR_POS                 = $01
STR_KEY                 = $02
STR_KEYPOS              = $03

* = $c000
;===============================================================================
; install BSOD64's launch hooks:
; (`SYS 49152` / `jsr $c000`)
;
; this will alter the system interrupts to launch BSOD64 whenever the RESTORE
; key is pressed, or the BRK instruction is encountered in running code
; 
; if you are using your own interrupt code then you will need to include a
; small piece of code at the beginning of your IRQ / NMI routine to invoke
; BSOD64 -- see the comments for the `bsod_irq` routine below
;
bsod_basic:
        ;-----------------------------------------------------------------------
        jmp bsod_init

;===============================================================================
; invoke BSOD64 manually with a JSR:
; (`SYS 49155` / `jsr $c003`)
;
; DO NOT USE FROM WITHIN AN INTERRUPT HANDLER, otherwise BSOD64 will wrongly
; see the JSR as the interrupt address -- use the next routine (`bsod_irq`)
; for invoking BSDO64 from within your interrupt handler
;
; THIS ASSUMES THE FOLLOWING STACK LAYOUT:
;
;       top  -> PC lo-byte              (pushed by JSR)
;               PC hi-byte              (pushed by JSR)
;
bsod_jsr:
        ;-----------------------------------------------------------------------
        ; push the processor status and registers to the stack
        ; to normalise the stack layout for BSOD64
        jmp bsod_push

;===============================================================================
; invoke BSOD64 from an interrupt (IRQ/NMI/BRK) environment:
; (`jmp $c006`)
;
; THIS ASSUMES THE FOLLOWING STACK LAYOUT:
;
;       top  -> Y register              (pushed by your IRQ/NMI routine)
;               X register              (pushed by your IRQ/NMI routine)
;               A register              (pushed by your IRQ/NMI routine)
;               processor status        (pushed by hardware interrupt)
;               PC lo-byte              (pushed by hardware interrupt)
;               PC hi-byte              (pushed by hardware interrupt)
;
bsod_irq:
        ;-----------------------------------------------------------------------
        ; disable interrupts first!
        ; we must stop any more host code from running!
        sei
        ; set the flag indicating how BSOD64 was launched
        ; in this case, by IRQ (the default), not by JSR
        lda # $00
        sta bsod_is_jsr


;===============================================================================
; 888888b.    .d8888b.   .d88888b.  8888888b.   .d8888b.      d8888
; 888  "88b  d88P  Y88b d88P" "Y88b 888  "Y88b d88P  Y88b    d8P888
; 888  .88P  Y88b.      888     888 888    888 888          d8P 888
; 8888888K.   "Y888b.   888     888 888    888 888d888b.   d8P  888
; 888  "Y88b     "Y88b. 888     888 888    888 888P "Y88b d88   888
; 888    888       "888 888     888 888    888 888    888 8888888888
; 888   d88P Y88b  d88P Y88b. .d88P 888  .d88P Y88b  d88P       888
; 8888888P"   "Y8888P"   "Y88888P"  8888888P"   "Y8888P"        888
;===============================================================================
; freeze the state of the machine:
; (NEVER CALL THIS DIRECTLY -- *ALWAYS* use `bsod_jsr` or `bsod_irq` above)
;
bsod_freeze
        ;-----------------------------------------------------------------------
        ; we do not know if decimal mode was in use,
        ; turn it off before we do any math
        cld
        ; get the stack pointer
        tsx
        stx orig_sp             ; keep an unmodified copy
        stx bsod_sp             ; make a working copy
        ; backup the registers that were pushed on to the stack by the
        ; IRQ/NMI routine (or BSOD64 iteself in the case of `bsod_jsr`)
        lda stack+1, x          ; top of stack
        sta orig_y              ; keep an unmodified copy of Y
        sta bsod_y              ; make a working (modifiable) copy
        lda stack+2, x          ; 2nd item on stack
        sta orig_x              ; keep an unmodified copy of X
        sta bsod_x              ; make a working (modifiable) copy
        lda stack+3, x          ; 3rd item on stack
        sta orig_a              ; keep an unmodified copy of A
        sta bsod_a              ; make a working (modifiable) copy

        ; below the registers should be the processor status
        ; at the time of interrupt. we will need this to determine
        ; if BSOD64 was invoked by a BRK instruction
        lda stack+4, x
        sta orig_f              ; keep an unmodified copy
        sta bsod_f              ; make a working (modifiable) copy

        ; and lastly the program-counter. for now we do not make a working
        ; copy because the address of the program counter varies depending
        ; on calling method (i.e. JSR/IRQ/BRK) and we will rectify that
        ; after the freeze is complete
        lda stack+5, x          ; program counter lo-byte
        sta orig_pc_lo          ; keep an unmodified copy
        lda stack+6, x          ; program counter hi-byte
        sta orig_pc_hi          ; keep an unmodified copy

        ; freeze low-memory:
        ;-----------------------------------------------------------------------
        ; backup the original zero-page. this includes the processor port
        ; ($00/$01) that defines the memory layout that we must reinstate
        ; when we defrost
        ldx # 0
-       lda zp, x
        sta orig_zp, x
        ; backup the original stack. since BSOD64 will be using the stack
        ; too, we will want to take a copy of the stack at freeze-time
        lda stack, x
        sta orig_stack, x
        ; backup the KERNAL/BASIC work RAM at $0200-$02FF
        lda work, x
        sta orig_work, x
        ; backup the KERNAL/BASIC vectors at $0300-$03FF
        lda vector, x
        sta orig_vectors, x
        ; backup the original text screen at $0400-$04FF
        lda screen, X
        sta orig_screen, x
        ; rinse and repeat
        dex
        bne -

        ; with the CPU port registers $00 & $01 backed up, we can now change
        ; memory layout to ensure I/O is accessible to backup VIC, SID etc.
        lda # %00000011         ; ignore Datasette control,
        sta zp+0                ; only modify memory layout
        lda # %00000001         ; switch I/O on, KERNAL & BASIC off
        sta zp+1

        ; with KERNAL off, we can back up the hardware vectors underneath:
        ; the non-maskable interrupt, wired to the RESTORE key & CIA2
        lda CPU_NMI_LO
        sta orig_nmi_lo
        lda CPU_NMI_HI
        sta orig_nmi_hi
        ; whilst the reset vector is never used after power-on,
        ; the host program may have modified it for its own uses
        lda CPU_RST_LO
        sta orig_rst_lo
        lda CPU_RST_HI
        sta orig_rst_hi
        ; the interrupt request vector, wired to CIA1 and VIC-II
        lda CPU_IRQ_LO
        sta orig_irq_lo
        lda CPU_IRQ_HI
        sta orig_irq_hi

        ; freeze VIC-II:
        ;-----------------------------------------------------------------------
        ; backup the VIC-II state before we start changing the screen
        ;
        ldx # $2e               ; number of VIC-II registers
-       lda vic, x
        sta orig_vic, x
        dex
        bpl -

        ; backup colour RAM. this is done in four
        ; stripes to avoid using a nested loop
        ldx # 0
-       lda vic_color  + $000, x
        sta orig_color + $000, x
        lda vic_color  + $100, x
        sta orig_color + $100, x
        lda vic_color  + $200, x
        sta orig_color + $200, x
        lda vic_color  + $300, x
        sta orig_color + $300, x
        dex
        bne -

        ; reset machine state:
        ;-----------------------------------------------------------------------
        ; enable KERNAL & BASIC
        inc zp+1
        inc zp+1

        ; this KERNAL routine erases pages 0, 1, & 2, runs a memory test,
        ; and configures BASIC limits. it sets the page number for screen
        ; memory to $04 just before it exits
        ;;jsr kernal_ramtas

        ; restore the default vector table at $0314-$0333
        jsr kernal_restor

        ; re-initialise VIC-II
        jsr kernal_scinit

        ; a BSOD must be blue...
        lda # BLUE
        sta vic+VIC_SCREEN_BORDER
        sta vic+VIC_SCREEN_BKGRND
        ; we can now hide the screen whilst we continue to work
        lda # %00001011         ; 25 rows, screen off
        sta vic+VIC_SCREEN_VERT

        ; re-initialise CIAs, get interrupts running again
        jsr kernal_ioinit

        lda # %00011011         ; 25 rows, screen on
        sta vic+VIC_SCREEN_VERT

        ; configure working environment
        ;-----------------------------------------------------------------------
        ; put handlers in place for interrupts whenever we turn off the KERNAL
        ;
        sei                     ; first, disable interrupts
        dec zp+1                ; turn off BASIC,
        dec zp+1                ; and then KERNAL
        ; install the NMI handler
        lda #< bsod_nmi_handler
        sta CPU_NMI_LO
        lda #> bsod_nmi_handler
        sta CPU_NMI_HI
        ; install the IRQ handler
        lda #< bsod_irq_handler
        sta CPU_IRQ_LO
        lda #> bsod_irq_handler
        sta CPU_IRQ_HI
        ; enable interrupts and hope
        ; the machine doesn't crash
        inc zp+1                ; turn on KERBAL,
        inc zp+1                ; and then BASIC
        cli                     ; enable interrupts

        ; make a note if BSOD64 was invoked by a BRK instruction
        ;
        lda bsod_f              ; processor state before interrupt
        and # %00010000         ; isolate the BRK bit
        beq +                   ; use $00 for non-BRK
        lda # $ff               ; use $FF for BRK
+       sta bsod_is_brk         ; we can easily refer to this in the future
        
        ; copy the original program
        ; counter to a working copy
        lda orig_pc_lo
        sta bsod_pc_lo
        lda orig_pc_hi
        sta bsod_pc_hi

        ; WARNING: the program counter on the stack will be 'off' by a
        ;          differing amount depending on how BSOD64 was invoked!
        ;
        ; the 6502 processor always auto-increments the program counter when
        ; executing an RTS or RTI instruction, so the address pushed on the
        ; stack is always one-less than the next instruction in the code
        ;
        ; however -- a bug in the BRK instruction causes the 6502
        ; to always add 2 to the program counter pushed to the stack
        ;
        ; in order for BSOD64 to unfreeze the machine state and resume,
        ; it needs to normalise the program counter it works with
        ;
        bit bsod_is_brk         ; begin by checking for the BRK state
        bpl +                   ; bit 7 not set, this is not a BRK call

        ; BRK call: fix the program counter
        ; by subtracting 2
        sec
        lda bsod_pc_lo
        sbc # 2
        sta bsod_pc_lo
        bcs +
        dec bsod_pc_hi

        ; add one to the working program counter
        ; to show the actual resume point in code
+       inc bsod_pc_lo
        bne +
        inc bsod_pc_hi
+
        ; set the memory cursor on that address,
        ; i.e. the memory viewer window will be focused on the freeze-point
        lda bsod_pc_lo
        sta bsod_memaddr_lo
        lda bsod_pc_hi
        sta bsod_memaddr_hi

        ; the memory viewer window is always aligned to the nearest 8-bytes;
        ; take the cursor address and round it to the nearest 8-bytes
        lda bsod_memaddr_lo
        and # %11111000         ; align to every 8 bytes
        sta bsod_memview_lo
        lda bsod_memaddr_hi
        sta bsod_memview_hi

;===============================================================================
; redraw the entire BSOD64 screen
;
bsod_redraw:
        ;-----------------------------------------------------------------------
        ; print the static elements of the screen
        ; (title, legends, key-commands etc)
        jsr bsod_print_str_inline
        ; configure screen + PETSCII
        !pet    PET_CLR         ; clear the screen
        !pet    PET_LCASE       ; switch to lower-case
        !pet    PET_CASEOFF     ; disable case-switching via SHIFT+C=
        ; BSOD64 title
        !pet    PET_CYAN, "BSOD64v0.0"
        !pet    PET_GREEN
        ; registers legend
        !pet    STR_POS, 2, 18, "PC:  A: X: Y:"
        ; flags legend "nv-bdiz"
        !pet    STR_POS, 2, 32, "nv-bdizc"
        ; banks legend
        !pet    STR_POS, 2, 9, "89ABCDEF"

        ; write the menu on the bottom of the screen
        !byte   STR_KEYPOS, 24, 0
        !pet    PET_F1, "MEMORY ", STR_KEY
        !pet    PET_F3, "VIC ", STR_KEY
        !pet    PET_F5, "SID ", STR_KEY
        !pet    PET_F7, "DISK"
        ; registers title
        !pet    STR_KEYPOS, 0, 18, "R", "REGISTERS"
        ; flags title
        !pet    STR_KEYPOS, 0, 32, "F", "FLAGS"
        ; stack title
        !pet    STR_KEYPOS, 5, 32, "S", "STACK"
        ; banks title
        !pet    STR_KEYPOS, 2, 0, "B", "BANKS"
        ; memory viewer title
        !byte   STR_KEYPOS, 5, 0
        !pet    "M", "MEMORY ", STR_KEY
        !pet    "G", "GOTO"
        ; set the colour ready for filling in the data
        !pet    PET_LTBLUE, STR_END

        ; draw the lines across the screen
        ldx # 39
        ldy # $63
-       lda # $64
        sta screen+( 6 * 40), x
        tya
        sta screen+(23 * 40), x
        ; add colour
        lda # CYAN
        sta vic_color+( 6 * 40), x
        sta vic_color+(23 * 40), x
        dex
        bpl -

        ; redraw the various windows
        jsr bsod_redraw_registers
        jsr bsod_redraw_flags
        jsr bsod_redraw_banks
        jsr bsod_redraw_stack
        jsr bsod_redraw_memory

bsod_input:
        ; scan the keyboard, placing any active key into the buffer
        jsr kernal_scnkey
        ; read a key from the keyboard buffer
        jsr kernal_getin

.down   cmp # $11               ; cursor down
        bne .up

        clc
        lda bsod_memview_lo
        adc # 8
        sta bsod_memview_lo
        bcc +
        inc bsod_memview_hi
+       jsr bsod_redraw_memory
        jmp bsod_input

.up     cmp # $91               ; cursor up
        bne bsod_input

        sec
        lda bsod_memview_lo
        sbc # 8
        sta bsod_memview_lo
        bcs +
        dec bsod_memview_hi
+       jsr bsod_redraw_memory
        jmp bsod_input

        jmp *

;===============================================================================
; set the cursor positon:
; (save a byte every time we have to do this)
;
bsod_set_cursor:
        clc                     ; = set cursor
        jmp kernal_plot         ; call KERNAL to position cursor

;===============================================================================
; redraw the register window
;
bsod_redraw_registers:
        ; program counter value
        ldy # 18
        ldx # 3
        lda bsod_pc_hi
        jsr bsod_print_hex8_pos
        lda bsod_pc_lo
        jsr bsod_print_hex8

        ; registers
        ldy # 23
        lda bsod_a
        jsr bsod_print_hex8_pos
        lda # ' '
        tax
        jsr kernal_chrout
        lda bsod_x
        jsr bsod_print_hex8
        txa
        jsr kernal_chrout
        lda bsod_y
        jsr bsod_print_hex8

        rts

;===============================================================================
; redraw the flags window:
;
bsod_redraw_flags:

        ; print the processor flags
        ldy # 32
        ldx # 3
        lda bsod_f
        sec
        jsr bsod_print_bin8

        rts

;===============================================================================
; redraw the banks (I/O, ROMs) window:
;
bsod_redraw_banks:

        ; draw the memory layout:
        ;-----------------------------------------------------------------------
        ; position cursor
        ldy # 9
        ldx # 3
        jsr bsod_set_cursor

        ; set reverse block printing
        lda # PET_RVSON
        jsr kernal_chrout

        ; default blank (no banked in ROM) character
        lda # ' '
        sta @b+1
        sta @i+1
        sta @k+1
        tax

        ; TODO: detect cart ROM
        jsr kernal_chrout
        jsr kernal_chrout
        
        lda orig_zp+1
        and # %00000011
        beq .print              ; %00 = all RAM, nothing else

        ldy # 'I'               ; I/O is on
        sty @i+1

        clc
        sbc # 1
        beq .print

        ldy # 'K'
        sty @k+1

        sbc # 1
        beq .print

        ldy # 'B'
        sty @b+1

.print:
@b      lda # $21
        jsr kernal_chrout
        jsr kernal_chrout
        txa
        jsr kernal_chrout       ; $C000 is always RAM
@i      lda # $21
        jsr kernal_chrout
@k      lda # $21
        jsr kernal_chrout
        jsr kernal_chrout

        lda # PET_RVSOFF
        jsr kernal_chrout
        rts

;===============================================================================
; redraw the stack window:
;
bsod_redraw_stack:

        ; set cursor to first line
        lda # 7
        sta @line
        ; get the frozen stack pointer
        ldy bsod_sp

-       jsr bsod_print_str_inline_pos
@line   !pet    7, 32, PET_PURPLE, STR_END
        ; is this line the top of the stack at freeze-time?
        cpy bsod_sp
        bne +
        lda # "@"
       +bit_skip2

+       lda # " "
        jsr kernal_chrout
        jsr bsod_print_str_inline
        !pet    PET_GREEN, "1", STR_END
        tya
        jsr bsod_print_hex8

        lda # PET_LTBLUE
        jsr kernal_chrout
        lda # " "
        jsr kernal_chrout

        sei                     ; disable interrupts
        dec zp+1                ; turn off BASIC,
        dec zp+1                ; and then KERNAL
        lda orig_stack+1, y
        inc zp+1                ; turn on KERNAL,
        inc zp+1                ; and then BASIC
        cli                     ; enable interrupts
        jsr bsod_print_hex8     ; print the value
        iny
        beq +

        ldx @line
        inx
        stx @line
        cpx # 23
        bcc -

+       ; TODO: handle hitting the bottom of the stack ($1FF);
        ;       unused lines will have to be cleared if the stack is shallow
        rts

;===============================================================================
; redraw the memory window:
;
bsod_redraw_memory:

        ; set the address to begin printing lines at
        lda bsod_memview_lo
        sta zp_addr_lo
        lda bsod_memview_hi
        sta zp_addr_hi

        ; set cursor to first line
        ldy # 0
        ldx # 7
        jsr bsod_set_cursor

        ; begin printing the hex dump
        ldy # 16                ; number of lines to print

-       jsr bsod_print_hexline
        clc
        lda # 8
        adc zp_addr_lo
        sta zp_addr_lo
        bcc +
        inc zp_addr_hi
+       dey
        bne -

        rts

;===============================================================================
; print a row of memory values:
;
bsod_print_hexline:

        sty @y+1                ; preserve Y-register
        lda # 0                 ; byte offset
        pha

        ; print the gutter
        jsr bsod_print_str_inline
        !pet    PET_GREEN, "  $"
        !byte   STR_END

        ; print the memory address
        lda zp_addr_hi
        jsr bsod_print_hex8
        lda zp_addr_lo
        jsr bsod_print_hex8
        lda # PET_LTBLUE
        jsr kernal_chrout

        pla
        tay
        ldx # 8

-       lda # ' '
        jsr kernal_chrout
        sei                     ; disable interrupts
        dec zp+1                ; turn off BASIC,
        dec zp+1                ; and then KERNAL
        lda (zp_addr), y
        inc zp+1                ; turn on KERNAL,
        inc zp+1                ; and then BASIC
        cli                     ; enable interrupts
        jsr bsod_print_hex8
        iny
        dex
        bne -

        lda # $0d
        jsr kernal_chrout

@y      ldy # $88
        rts

;===============================================================================
; print a byte as PETSCII hexadecimal:
;
;       A = byte value
;       X = screen row
;       Y = screen col
;
bsod_print_hex8_pos:
        ;-----------------------------------------------------------------------
        pha                     ; put aside original value

        jsr bsod_set_cursor     ; position the cursor
        
        pla                     ; retrieve original value

bsod_print_hex8:
        ;-----------------------------------------------------------------------
        stx @x+1                ; preserve X-register
        sty @y+1                ; preserve Y-register

        sed                     ; enable decimal mode
        pha                     ; put original value aside

        lsr                     ; shift upper nybble down
        lsr                     ; ...
        lsr                     ; ...
        lsr                     ; ...
        cmp #9+1
        adc # $30               ; rebase to PETSCII '0' and above
        jsr kernal_chrout
        iny

        pla                     ; retrieve original value
        and # $0f               ; extract lower nybble
        cmp # 9+1
        adc # $30               ; rebase to PETSCII '0' and above
        jsr kernal_chrout
        iny

        cld                     ; disable decimal mode
@x      ldx # $88
@y      ldy # $88
        rts

;===============================================================================
; print a byte as PETSCII binary:
;
;       A = value
;      c- = use 0/1 digits
;      c+ = use -/* digits
;       X = screen row
;       Y = screen col
;
bsod_print_bin8:

        php                     ; put aside input carry state
        pha                     ; put aside original value

        jsr bsod_set_cursor     ; position the cursor

        ldy # 8                 ; print 8-bits
        pla                     ; retrieve original value

        ; check the carry state. if carry is set binary
        ; digits will be printed as "-" = 0 and "*" = 1
        plp                     ; retrieve input carry state
        bcs @sym                ; carry set = use symbols

        ; print "0" & "1" digits
        ;-----------------------------------------------------------------------
@dig    asl                     ; pop a bit off the value
        tax                     ; remember remainder for next loop
        lda # $30               ; PETSCII '0'
        adc # 0                 ; PETSCII '1' if bit was 1
        jsr kernal_chrout       ; print digit

        txa                     ; retrieve remaining value before looping
        dey                     ; 1 digit down
        bne @dig                ; any more left?

        rts

        ; print "-" & "*" digits
        ;-----------------------------------------------------------------------
@sym    asl                     ; pop a bit off the value
        tax                     ; remember remainder for next loop

        bcc +                   ; is bit 0 or 1?
        lda # $2a               ; PETSCII '*'
        !byte $2c               ; `bit $....` (skip next 2-byte instruction)
+       lda # $2d               ; PETSCII '-'
        jsr kernal_chrout
        
        txa                     ; retrieve remaining value before looping
        dey                     ; 1 digit down
        bne @sym                ; any more left?

        rts

;===============================================================================
; print a key guide, e.g. "R:REGISTERS":
;
; having a routine for this does away with the need to store
; the same colour-changing bytes for every key string
;
bsod_print_key_inline_pos:
        ;-----------------------------------------------------------------------
        ; clear carry to indicate an embedded
        ; position in the string
        clc
        ; skip the next instruction (`clc`)
        ; when we fall into the routine below
        !byte $24

bsod_print_key_inline:
        ;-----------------------------------------------------------------------
        ; set carry to indicate 'no embedded position'
        sec

        ; preserve registers at the end of the inline string
        ; printing routine, which is where we will exit
        stx bsod_print_str_inline_pos__x
        sty bsod_print_str_inline_pos__y

        ; get the address of the string from the stack.
        ; if carry is clear, the row/col will be read
        ; from the first two bytes of the string
        jsr bsod_stack_string
        
bsod_print_key_inline_print:
        ;-----------------------------------------------------------------------
        ; print the key
        lda # PET_WHITE
        jsr kernal_chrout
        lda (zp_str), y
        ; handle some special codes that require more than one character:
        cmp # PET_F1            ; is the key F1 or above?
        bcc +
        cmp # PET_F8+1          ; is it F1 through F8?
        bcs +
        tax                     ; keep that Fx keycode...

        ; print the F for Function, first
        lda # "f"
        jsr kernal_chrout
        ; turn an F1-F8 PETSCII code ($85-$8C)
        ; into a PETSCII number ($31-$38)
        txa                     ; retrieve the Fx keycode
        sbc # $53               ; move into "1"-"8" range

        ; print the key letter
+       jsr kernal_chrout
        ; print the colon separating key and function
        lda # PET_LTBLUE
        jsr kernal_chrout
        lda # ":"
        jsr kernal_chrout
        ; print the remainder of the string in yellow
        lda # PET_YELLOW
        jsr kernal_chrout
        iny
        jmp bsod_print_str_inline_pos__print

;===============================================================================
; print a null-terminated PETSCII string, at the current cursor location,
; where the string data immediately follows the call to this routine!
;
; preserves:    X, Y
;
bsod_print_str_inline:

        ; set carry to indicate 'no embedded position'
        sec
        ; skip the next instruction (`clc`)
        ; when we fall into the routine below
        !byte $24
        
;===============================================================================
; print a null-terminated PETSCII string that includes the row+col position
; in the first two bytes, where the string data immediately follows the call
; to this routine!
;
; preserves:    X, Y
;
bsod_print_str_inline_pos:
        
        ; clear carry to indicate that the cursor position
        ; is embdedded in the string
        clc

        ; preserve X & Y
        stx @x+1
        sty @y+1

        ; get the address + row/col of the string from the stack
        jsr bsod_stack_string

@print  lda (zp_str), y
!addr   bsod_print_str_inline_pos__print = @print
        tax
        beq +                   ; STR_END -- stop printing
        dex
        beq @next_pos           ; STR_POS -- move cursor and continue printing
        dex
        beq @next_key           ; STR_KEY -- print another key-command
        dex
        beq @next_keypos        ; STR_KEYPOS -- move & print key-command

        jsr kernal_chrout
        iny
        bne @print

+       tsx
        iny
        tya
        adc stack+1, x
        sta stack+1, x
        bcc @x
        inc stack+2, x
        
@x      ldx # $88
!addr   bsod_print_str_inline_pos__x = @x+1
@y      ldy # $88
!addr   bsod_print_str_inline_pos__y = @y+1
        rts

@next_pos:
        ; read & set the cursor position
        ; from the next two bytes
        iny
        jsr bsod_stack_string_pos
        ; continue printing
        jmp @print

@next_key:
        ; print another key-command
        iny
        jmp bsod_print_key_inline_print

@next_keypos:
        ; set cursor and print another key-command
        iny
        jsr bsod_stack_string_pos
        jmp bsod_print_key_inline_print

;===============================================================================
; read an inline string address from the stack:
;
bsod_stack_string:
        ;-----------------------------------------------------------------------
        php                     ; put aside the carry flag for later

        tsx                     ; current stack pointer
        clc
        lda stack+4, x
        adc # 1
        sta zp_str_lo
        lda stack+5, x
        adc # 0
        sta zp_str_hi

        ldy # 0
        plp                     ; retrieve the original carry flag
        bcc bsod_stack_string_pos
        rts

bsod_stack_string_pos:
        ;-----------------------------------------------------------------------
        ; read the row & col bytes
        ;
        lda (zp_str), y         ; read the row
        tax                     ; must be in X for KERNAL call
        iny
        tya
        pha
        lda (zp_str), y         ; read the col
        tay                     ; must be in Y for KERNAL call

        jsr bsod_set_cursor     ; position the cursor

        pla
        tay
        iny                     ; new string index

        rts

;===============================================================================
; normalise the stack to appear the same as the interrupt call would:
; this reduces the complexity of handling
; the different methods of invoking BSOD64
;
; this generates te following stack profile:
;
;       top  -> Y register              (pushed by this routine)
;               X register              (pushed by this routine)
;               A register              (pushed by this routine)
;               processor status        (pushed by this routine)
;               PC lo-byte              (pushed by the JSR to BSOD64)
;               PC hi-byte              (pushed by the JSR to BSOD64)
;
bsod_push:
        ; push the processor status to the stack
        ;
        ; even though an interrupt could occur between this instruction
        ; and the next, we need to capture the current interrupt flag state
        ; before changing it
        php
        ; disable interrupts
        sei
        ; the PHP instruction always sets the BRK bit! since this routine
        ; is used for a JSR BSOD64 call and not an interrupt call, we know
        ; the BRK bit should be zero, so we enforce that here:
        pla                     ; pull the processor status
        and # %11101111         ; mask out the BRK-bit
        pha                     ; push back to the stack
        ; push the registers
        pha
        txa
        pha
        tya
        pha
        ; set flag to indicate BSOD64 being invoked by JSR
        ; -- we will have to resume execution differently
        lda # $ff
        sta bsod_is_jsr

        ; now begin the freeze
        jmp bsod_freeze

;===============================================================================
;
bsod_init:
        rts

;===============================================================================
; whenever we have to turn the KERNAL off, there needs to be an IRQ handler
; in place to avoid crashing
;
bsod_irq_handler:
        ;-----------------------------------------------------------------------
        rti

;===============================================================================
; likewise, without the KERNAL, the RAM underneath will determine the NMI
; handler (the RESTORE key)
;
bsod_nmi_handler:
        ;-----------------------------------------------------------------------
        rti

;===============================================================================
; BSOD64's backup of some C64 state at the point of BRK / NMI.
; this is used to minimize damage to the original stack
;
; unlike the other backup data (zero-page, stack, colour RAM),
; these are kept within the program code due to their sensitivity
; to corruption, and remain unmodified. working copies are made
; whilst BSOD64 is in use
;
orig_a:                         ; backup of the A register
        !byte   $88
orig_x:                         ; backup of the X register
        !byte   $88
orig_y:                         ; backup of the Y register
        !byte   $88
orig_sp:                        ; backup of the stack pointer
        !byte   $88
orig_pc:                        ; backup of the program counter
orig_pc_lo:
        !byte   $88
orig_pc_hi:
        !byte   $88
orig_f:                         ; backup of the processor status (flags)
        !byte   $88

orig_nmi:                       ; backup of the NMI hardware vector ($FFFA/B)
orig_nmi_lo:
        !byte   $88
orig_nmi_hi:
        !byte   $88

orig_rst:                       ; backup of the RESET hardware vector ($FFFC/D)
orig_rst_lo:
        !byte   $88
orig_rst_hi:
        !byte   $88

orig_irq:                       ; backup of the IRQ hardware vector ($FFFE/F)
orig_irq_lo:
        !byte   $88
orig_irq_hi:
        !byte   $88


;===============================================================================
bsod_defrost:
        ; the "Return From Interrupt" will pull the processor status
        ; and return address from the stack
        rti
}