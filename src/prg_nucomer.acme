; nÃ¼comer diskzine (c) copyright Kroc Camen 2019-2023. unless otherwise noted,
; licenced under Creative Commons Attribution Non-Commercial Share-Alike 4.0
; licence; you may reuse and modify this code how you please as long as you:
;
; - retain the copyright notice
; - use the same licence for your derived code
; - do not use it for commercial purposes
;   (contact the author for a commercial licence)
;
;===============================================================================
!source "nucomer.acme"          ; nucomer constants for memory layout

* = nu_main

boot:
;===============================================================================
        jmp init

!source "interrupts.acme"

init:
;===============================================================================
        ; setup screen:
        lda # %00110111
        sta .CPU_CONTROL
        
        lda # %00000000         ; turn the screen off whilst we
        sta .VIC_SCREEN_CTL1    ; fiddle with the VIC settings
        sta vic_garbage+0       ; clear the garbage byte!

        ; change the VIC bank
        ;
        ldx .CIA2_PORTA_DDR     ; (backup current value)
        lda # %00000111         ; we only want to write to the low 3-bits
        sta .CIA2_PORTA_DDR     ; set the port's read/write state
        ;
        ; the bit value is the inverse of the bank number 0-3
        lda # (! NU_VIC_BANK) & %00000011
        sta .CIA2_PORTA         ; change VIC bank

        ; we must restore the read/write state
        ; of the port or disk I/O will break!
        stx .CIA2_PORTA_DDR

        ; change the VIC memory layout to position the text-screen & font
        lda # ((>nu_screen & %00111100) << 2) | ((>nu_font & %00111000) >> 2)
        sta .VIC_LAYOUT

        ; before our custom IRQs are initialised, make sure that the address
        ; for playing music is set to $0000 (do not play music). we can't
        ; try to play the song before it's initialised!
        lda # 0
        sta+1 ZP_SONG_PLAY+LO
        sta+1 ZP_SONG_PLAY+HI

        ; start menu screen:
        ;-----------------------------------------------------------------------
        jsr irqs_init

        ; turn off BASIC & KERNAL ROM,
        ; leave I/O on (BSOD64 will be under there)
        ;;dec .CPU_CONTROL
        dec .CPU_CONTROL
        dec .CPU_CONTROL

        ; initialise the SID music. the custom IRQs
        ; will handle playing the song for each frame
        jsr music_init

        ; from here, there is no going back...
        jsr menu_screen
        
        ; halt and catch fire
        jmp *

;===============================================================================

!source "print.acme"            ; global string-printing routines
!source "keyboard.acme"
!source "music.acme"            ; music loading / playing routines
!source "menu.acme"             ; menu screen
!source "read.acme"             ; text screen

end_of_code:

; the main code & gfx share a VIC bank, make sure that the outfit code
; does not spill over into the reserved graphics space (font, screens)
;
!ifdef WARN_OVERFLOW !eof
!if * >= nu_gfx {
        WARN_OVERFLOW = 1
        !serious "Main code overflows into graphics! * = ", *
}