; nÃ¼comer diskzine (c) copyright Kroc Camen 2019-2023. unless otherwise noted,
; licenced under Creative Commons Attribution Non-Commercial Share-Alike 4.0
; licence; you may reuse and modify this code how you please as long as you:
;
; - retain the copyright notice
; - use the same licence for your derived code
; - do not use it for commercial purposes
;   (contact the author for a commercial licence)
;
; prg_intro.acme:
;===============================================================================
; after the bootstrap, the "intro" installs some permenant shared code
; shows the logo, and then loads the main menu. this is done this way
; so that the logo screen can be discard and overwritten after it is
; shown and not occupy RAM permenantly for a once-off screen
;
!source "nucomer.acme"          ; nucomer constants for memory layout

* = nu_intro

; the shared code needs to be kept permenantly, so we place it first and jump
; over it (as code execution begins here) because the intro code that follows
; is not important and can be overwritten later
;
intro_boot:
        ;-----------------------------------------------------------------------
        jmp intro_init

; shared code:
;===============================================================================
; we must make available the addresses of the routines
; in the shared code area for use by the main outfit
;
!sl     "build/intro_symbols.acme"

; we need to have safe interrupt-handlers in place before we can disable
; BASIC & KERNAL ROMs! the shared code must include our stable IRQ routines,
; as the main outfit code will be loaded into the RAM under BASIC ROM and we
; can't turn BASIC off without replacement interrupt-handlers in place!
;
!source "interrupts.acme"

; the shared code *must* fit beneath $1000
; as that is where the SID music will be
;
!ifdef WARN_OVERFLOW !eof
!if * >= nu_song {
        WARN_OVERFLOW = 1
        !warn "Shared code overflows into SID data! * = ", *
}

;===============================================================================
; TODO: fast-load the outfit, whilst the intro plays
;
intro_init:
        ;-----------------------------------------------------------------------
        ; turn the screen off whilst we clear it
        lda # %00000000
        sta .VIC_SCREEN_CTL1

        ; change the VIC memory layout to position the text-screen & char ROM
        lda # ((>nu_intro_screen & %00111100) << 2) | ((>$1800 & %00111000) >> 2)
        sta .VIC_LAYOUT

        ; put our custom IRQ handlers in place to avoid crashing
        ; when we turn off the ROMs!
        ; TODO: BSOD64 is not in place yet -- a BRK or RESTORE will crash!
        jsr irqs_init

        ;-----------------------------------------------------------------------
        jsr logo_screen
        
        ; load the main outfit
        ;-----------------------------------------------------------------------
;;        lda #> (nu_main-1)+$c
;;        pha
;;        lda #< (nu_main-1)+$c
;;        pha
        
        ;;lda CPU_CONTROL
        ;;and # %11111100
        ;;sta CPU_CONTROL
        ;;dec .CPU_CONTROL

        lda # %00110111
        sta .CPU_CONTROL

        ldx+1 .ZP_KERNAL_DEV    ; last-used KERNAL device number
        bne +                   ; not 0? good
        ldx # .DEV_DRV8         ; default to drive 8
+       ldy # $01               ; use PRG load-address
        tya                     ; logical file number
        jsr .KERNAL_SETLFS

        ldx #< @filename_outfit
        ldy #> @filename_outfit
        lda # 7                 ; A is string-length
        jsr .KERNAL_SETNAM      ; set KERNAL file name
        lda # 0                 ; load, not verify
        jsr .KERNAL_LOAD

        ; jump to the main outfit
        ;;dec .CPU_CONTROL
        jmp .basic_start+$c

@filename_outfit:
        ;-----------------------------------------------------------------------
        !pet    "nucomer", 0

;===============================================================================
!source "logo.acme"