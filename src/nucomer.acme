; n√ºcomer magazine (c) copyright Kroc Camen 2019. unless otherwise noted,
; licenced under Creative Commons Attribution Non-Commercial Share-Alike 4.0
; licence; you may reuse and modify this code how you please as long as you:
;
; - retain the copyright notice
; - use the same licence for your derived code
; - do not use it for commercial purposes
;   (contact the author for a commercial licence)
;
;===============================================================================
!source "c64/c64.acme"          ; C64 hardware / software constants

lo = 0
hi = 1

; variable for address allocation:
!set    alloc  = $0000

; set the allocation address:
!macro  alloc   .addr {
        ; set the new address to begin allocating
        !set    alloc  = .addr
}
; allocate, without advancing the address:
!macro  addr    ~.label {
        !addr   .label  = alloc
}
; allocate a byte:
!macro  byte    ~.label {
        !addr   .label  = alloc
        !set    alloc   = alloc + 1
}
; allocate a custom number of bytes:
!macro  bytes   ~.label, .size {
        !addr   .label  = alloc
        !set    alloc   = alloc + .size
}
; allocate a word:
!macro  word    ~.label {
        !addr   .label  = alloc
        !set    alloc   = alloc + 2
}

;-------------------------------------------------------------------------------
; memory map:
;
;  $0   $1000        $4000           $8000       $B000 $C000    $E000    $FFFF
;  +----+------------+---------------------------+-----+--------+--------+
;  |  * | SID (12K)  | TEXT (28K)                | *   | BSOD64 | GFX    |
;  +----+------------+---------------------------+-----+--------+--------+
;     ^                                            ^
;     shared code                                  main code
;
!addr {

nu_intro                = $0334 ; address of the shared / intro code
nu_intro_screen         = $3c00 ; address of the intro screen

nu_main                 = $b000 ; address of the main outfit code
nu_song                 = $1000 ; address of SID song

;-------------------------------------------------------------------------------
; articles are loaded in from this point, though note that this includes
; some meta-data, compression tables and not just straight text beginning
; at this point
;
+alloc  $4000

+addr   ~nu_text                ; beginning of article header + data
+word   ~nu_text_literals       ; pointer to table of token literals
+byte   ~nu_text_literals_count ; number of literal tokens
+word   ~nu_text_tokens_left    ; pointer to token-pairs table (left-bytes)
+word   ~nu_text_tokens_right   ; pointer to token-pairs table (right-bytes)
+word   ~nu_text_lines          ; pointer to list of line-lengths
+word   ~nu_text_length         ; number of lines in the article
+word   ~nu_text_footnotes      ; pointer to footnote meta-data
+word   ~nu_text_data           ; pointer to compressed text

;-------------------------------------------------------------------------------
NU_VIC_BANK             = 3     ; the VIC bank used by the outfit

nu_font                 = $e000 ; location of the custom font; 4 KB
nu_font_up              = $e000 ; upper-case half of the font; 2 KB
nu_font_lo              = $e800 ; lower-case half of the font; 2 KB

nu_screen               = $f000 ; main text-screen location; 1 KB

; in a case of "if it's stupid but it works, it's not stupid" we handle the
; scrolling in of new lines by simply treating the screen as taller than it
; actually is, filling new lines into 40 char buffers for above / below the
; screen (these are assigned to high-RAM so that they do not occupy bytes in
; the main code)
;
nu_screen_before        = $f400
nu_screen_temp          = $f428
nu_screen_after         = $f450

; we can't put data before / after the colour RAM when I/O is on,
; and turning I/O on & off to use the RAM underneath is too slow
; so the 'off-screen' colour rows are stored here
;
nu_colour_before        = $f478
nu_colour_temp          = $f4a0
nu_colour_after         = $f4c8

nu_sprites              = $f500 ; sprite gfx

}

;-------------------------------------------------------------------------------
; BSOD64 integration; not the actual BSOD64 code
; as that is added to the disk-image
;
!addr {

bsod64_jsr              = $c003
bsod64_irq              = $c006
}