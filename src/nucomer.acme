; n√ºcomer diskzine (c) copyright Kroc Camen 2019-2023. unless otherwise noted,
; licenced under Creative Commons Attribution Non-Commercial Share-Alike 4.0
; licence; you may reuse and modify this code how you please as long as you:
;
; - retain the copyright notice
; - use the same licence for your derived code
; - do not use it for commercial purposes
;   (contact the author for a commercial licence)
;
;===============================================================================
!source "acme.acme"             ; assembler helpers (macros &c.)
!source "c64/c64.acme"          ; C64 hardware / software constants

;-------------------------------------------------------------------------------
; memory map:
;
;  $0   $1000        $4000            $8000            $C000     $E000    $FFFF
;  +----+------------+----------------+----------------+----+----+--------+
;  |  * | SID (12K)  | TEXT (16K)     | CODE & GFX     | BS |    | UNUSED |
;  +----+------------+----------------+----------------+----+----+--------+
;     ^ shared code ($0400+)                      BSOD64 ^  $D000
;
!addr   nu_intro        = $0400 ; address of the shared / intro code
!addr   nu_intro_screen = $3c00 ; address of the intro screen

!addr   nu_song         = $1000 ; address of SID song

!addr   nu_main         = $8000 ; address of the main outfit code

;-------------------------------------------------------------------------------
; articles are loaded in from this point, though note that this includes
; some meta-data, compression tables and not just straight text beginning
; at this point
;
+alloc  $4000

+addr   ~nu_text                ; beginning of article header + data
+word   ~nu_text_tokens_left    ; pointer to token-pairs table (left-bytes)
+word   ~nu_text_tokens_right   ; pointer to token-pairs table (right-bytes)
+word   ~nu_text_lines          ; pointer to list of line-lengths
+word   ~nu_text_length         ; number of lines in the article
+word   ~nu_text_footnotes      ; pointer to footnote meta-data
+word   ~nu_text_data           ; pointer to compressed text
+byte   ~nu_text_literals_count ; number of literal tokens
+addr   ~nu_text_literals       ; beginning of token literals...

;-------------------------------------------------------------------------------
NU_VIC_BANK             = 2     ; the VIC bank used by the outfit

; graphics are positioned at the top of the VIC bank: this is required as the
; VIC-II will use the last byte of the bank as invalid display garbage and we
; want to set that byte to 0; this would not be possible in VIC bank 3, as the
; IRQ vector hi-byte is located $FFFF
;
!addr   vic_garbage     = ($4000 * (NU_VIC_BANK+1)) - 1

; note that in VIC bank 2 the character ROM will appear
; at $9000-$A000 so we can't place our font or screens there!
; note that program code can still occupy this space
;
!addr   vic_font_up     = $9000
!addr   vic_font_lo     = $9800

; start address of graphics space
+alloc  $b000
+addr   ~nu_gfx                                                         ;$B000+
; our custom font, we only need 2K
; as we only use one character set
+bytes  ~nu_font,       2048                                            ;$B000

+bytes  ~nu_screen,     1024    ; address of the screen                 ;$B800
+bytes  ~nu_overlay,    1024    ; a 2nd screen used for the overlay     ;$BC00

; TODO: better location for these
+alloc  $0c00

; in a case of "if it's stupid but it works, it's not stupid" we handle the
; scrolling in of new lines by simply treating the screen as taller than it
; actually is, filling new lines into 40 char buffers for above / below the
; screen (these are assigned to high-RAM so that they do not occupy bytes in
; the main code)
;
+bytes  ~nu_screen_before,      40
+bytes  ~nu_screen_after,       40

; we can't put data before / after the colour RAM when I/O is on,
; and turning I/O on & off to use the RAM underneath is too slow
; so the 'off-screen' colour rows are stored here
;
+bytes  ~nu_colour_before,      40
+bytes  ~nu_colour_after,       40

;-------------------------------------------------------------------------------
; BSOD64 integration; not the actual BSOD64 code
; as that is added to the disk-image as a binary
;
!addr   bsod64_jsr      = $c003
!addr   bsod64_irq      = $c006